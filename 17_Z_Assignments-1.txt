Create the variables file (variables.tf) and add four variables with these default values:
	1. container_name: mysql.
	2. mysql_root_password: P4sSw0rd0!.
	3. mysql_network_name: mysql_internal_network.
	4. mysql_volume_name: mysql_data.

Create the images file (images.tf)
	1. Add the docker_image resource and call it mysql_image.
	2. Set the name to mysql:5.7.

Create the networks file (networks.tf):-
	1. Add the docker_network resource and call it private_bridge_network.
	2. Set the name to use the mysql_network_name variable.
	3. Set the driver to bridge.
	4. Set internal to true.

Create the volumes file (volume.tf):-
	1. In volumes.tf add the docker_volume resource and call it mysql_data_volume.
	2. Set the name to use the mysql_volume_name variable.

Create the main file (main.tf):-
	1. In main.tf add the docker_container resource and call it mysql_container.
	2. Set the name to use the container_name variable.
	3. Set the image to use the name of the image coming from docker_image.
	4. Create an environment variable for MYSQL_ROOT_PASSWORD and set it to the mysql_root_password variable.
	5. Configure the container volume to use the volume created by docker_volume, and make sure the container_path is set to /var/lib/mysql.
	7. The container needs to use the network created by docker_network.

Deploy the infrastructure
	1. Initialize Terraform.
	2. Validate the files.
	3. Generate a Terraform plan.
	4. Deploy the infrastructure using the plan file.


[root@ip-172-31-9-125 mysql]# cat main.tf
resource "docker_container" "docker_container"{
    name = var.container_name
    image = docker_image.mysql.name
    env = [
        "MYSQL_ROOT_PASSWORD = ${var.mysql_root_password}"
    ]
    volumes {
         volume_name = docker_volume.mysql_data_volume.name
         container_path = "/var/lib/mysql"
    }
   networks_advanced {
       name =docker_network.private_bridge_network.name
    }
}
[root@ip-172-31-9-125 mysql]# cat variable.tf
variable "container_name" {
    type        = string
    description = "container name"
    default     =  "mysql"
}

variable "mysql_network_name" {
    type        = string
    description = "(optional) describe your variable"
    default     = "mysql_internal_network"
}

variable "mysql_volume_name" {
    type        = string
    description = "(optional) describe your variable"
    default     = "mysql_data"
}

variable "mysql_root_password" {
    description = "(optional) describe your variable"
    default     = "cDRzU1dvUmQwIQo="
}
[root@ip-172-31-9-125 mysql]# cat volume.tf
resource "docker_volume" "mysql_data_volume"{
    name = var.mysql_volume_name
}
[root@ip-172-31-9-125 mysql]# terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/docker...

Error: Failed to install providers

Could not find required providers, but found possible alternatives:

  hashicorp/docker -> terraform-providers/docker

If these suggestions look correct, upgrade your configuration with the
following command:
    terraform 0.13upgrade .

[root@ip-172-31-9-125 mysql]#  terraform 0.13upgrade

This command will update the configuration files in the given directory to use
the new provider source features from Terraform v0.13. It will also highlight
any providers for which the source cannot be detected, and advise how to
proceed.

We recommend using this command in a clean version control work tree, so that
you can easily see the proposed changes as a diff against the latest commit.
If you have uncommited changes already present, we recommend aborting this
command and dealing with them before running this command again.

Would you like to upgrade the module in the current directory?
  Only 'yes' will be accepted to confirm.

  Enter a value: yes

-----------------------------------------------------------------------------

Upgrade complete!

Use your version control system to review the proposed changes, make any
necessary adjustments, and then commit.

[root@ip-172-31-9-125 mysql]# terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of terraform-providers/docker...
- Installing terraform-providers/docker v2.7.2...
- Installed terraform-providers/docker v2.7.2 (signed by HashiCorp)

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, we recommend adding version constraints in a required_providers block
in your configuration, with the constraint strings suggested below.

* terraform-providers/docker: version = "~> 2.7.2"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[root@ip-172-31-9-125 mysql]# terraform  validate
Success! The configuration is valid.

[root@ip-172-31-9-125 mysql]# terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.docker_container will be created
  + resource "docker_container" "docker_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + dns              = (known after apply)
      + dns_opts         = (known after apply)
      + entrypoint       = (known after apply)
      + env              = [
          + "MYSQL_ROOT_PASSWORD = cDRzU1dvUmQwIQo=",
        ]
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = "mysql:5.7"
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = (known after apply)
      + log_opts         = (known after apply)
      + logs             = false
      + must_run         = true
      + name             = "mysql"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + shm_size         = (known after apply)
      + start            = true
      + user             = (known after apply)
      + working_dir      = (known after apply)

      + networks_advanced {
          + aliases = []
          + name    = "mysql_internal_network"
        }

      + volumes {
          + container_path = "/var/lib/mysql"
          + volume_name    = "mysql_data"
        }
    }

  # docker_image.mysql will be created
  + resource "docker_image" "mysql" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "mysql:5.7"
    }

  # docker_network.private_bridge_network will be created
  + resource "docker_network" "private_bridge_network" {
      + driver      = "bridge"
      + id          = (known after apply)
      + internal    = true
      + ipam_driver = "default"
      + name        = "mysql_internal_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.mysql_data_volume will be created
  + resource "docker_volume" "mysql_data_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "mysql_data"
    }

Plan: 4 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

[root@ip-172-31-9-125 mysql]# docker volume ls|grep mysql
[root@ip-172-31-9-125 mysql]# terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.docker_container will be created
  + resource "docker_container" "docker_container" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = (known after apply)
      + container_logs   = (known after apply)
      + dns              = (known after apply)
      + dns_opts         = (known after apply)
      + entrypoint       = (known after apply)
      + env              = [
          + "MYSQL_ROOT_PASSWORD = cDRzU1dvUmQwIQo=",
        ]
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = "mysql:5.7"
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = (known after apply)
      + log_opts         = (known after apply)
      + logs             = false
      + must_run         = true
      + name             = "mysql"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + shm_size         = (known after apply)
      + start            = true
      + user             = (known after apply)
      + working_dir      = (known after apply)

      + networks_advanced {
          + aliases = []
          + name    = "mysql_internal_network"
        }

      + volumes {
          + container_path = "/var/lib/mysql"
          + volume_name    = "mysql_data"
        }
    }

  # docker_image.mysql will be created
  + resource "docker_image" "mysql" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "mysql:5.7"
    }

  # docker_network.private_bridge_network will be created
  + resource "docker_network" "private_bridge_network" {
      + driver      = "bridge"
      + id          = (known after apply)
      + internal    = true
      + ipam_driver = "default"
      + name        = "mysql_internal_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.mysql_data_volume will be created
  + resource "docker_volume" "mysql_data_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "mysql_data"
    }

Plan: 4 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_volume.mysql_data_volume: Creating...
docker_image.mysql: Creating...
docker_network.private_bridge_network: Creating...
docker_volume.mysql_data_volume: Creation complete after 0s [id=mysql_data]
docker_network.private_bridge_network: Creation complete after 2s [id=a8656ed1dad53d8b90c6676261d38a0b1eb07f5249f7e021570053fb686cda5e]
docker_image.mysql: Still creating... [10s elapsed]
docker_image.mysql: Creation complete after 10s [id=sha256:718a6da099d82183c064a964523c0deca80619cb033aadd15854771fe592a480mysql:5.7]
docker_container.docker_container: Creating...
docker_container.docker_container: Creation complete after 1s [id=eeb517d6f16307fe342ccb9925b9b5b27e3e63536cbd1e9db6c8aa25fb723dba]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.
[root@ip-172-31-9-125 mysql]# docker volume ls|grep mysql
local               mysql_data
[root@ip-172-31-9-125 mysql]# docker network ls|grep mysql
a8656ed1dad5        mysql_internal_network   bridge              local
