Using Terraform to Create a RandomID and S3 Buckets

Create the Main file:-
Create the main.tf Terraform file.
Add a provider, aws.
Set the region to use a variable called aws_region.
Add a random_id resource and name it tf_bucket_id.
Set the byte_length to 2.

Add a resource, aws_s3_bucket, and name it tf_code.
The bucket name will be set using a variable called project_name, followed by a -, and will use the dec attribute from tf_bucket_id.
Set the acl to private.
Set force_destroy to true.
Create a tag with a name to tf_bucket.

Create the Variables File:-
Create the variables.tf Terraform file.
Add a variable called aws_region.
Set the default to us-east-1. Add a variable called project_name.
Set the default to la-terraform.

Create the outputs file:-
Create the outputs.tf Terraform file.
Add a output called bucketname.
The value should be set to id, coming from tf_code.

Deploy the infrastructure:-
Initialize Terraform.
Validate the files.
Deploy the S3 bucket.

ANS
cat variable.tf
variable "aws_region" {
    type = string
    description = "you can change then region"
    default = "us-east-1"
}

variable "project_name" {
    type = string
    description = "name of the bucket"
    default = "laterraform"
}

variable "access_key" {
    type = string
    description = "provide access key is"
    default   = "************"
}

variable "secret_key" {
    type        = string
    description = "provide secret_key of the varaible"
    default     = "***************"
}
[root@ip-172-31-9-125 s3bucket]# cat main.tf
provider "aws" {
  access_key = var.access_key
  secret_key = var.secret_key
  region = var.aws_region
}

resource "random_id" "tf_bucket_id" {
    byte_length = 2

}

resource "aws_s3_bucket" "tf_code"{
    bucket        = var.project_name
    acl           = "private"
    force_destroy = "true"
    tags      ={
        name  = "tf_bucket"
    }

}
[root@ip-172-31-9-125 s3bucket]# cat output.tf
output "bucket_name" {
    value = aws_s3_bucket.tf_code.id
}
[root@ip-172-31-9-125 s3bucket]#



[root@ip-172-31-9-125 ec2-user]# mkdir s3bucket
[root@ip-172-31-9-125 ec2-user]# cd s3bucket/
[root@ip-172-31-9-125 s3bucket]# vi main.tf
[root@ip-172-31-9-125 s3bucket]# vi output.tf
[root@ip-172-31-9-125 s3bucket]# vi variable.tf
[root@ip-172-31-9-125 s3bucket]# terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Finding latest version of hashicorp/random...
- Installing hashicorp/random v2.3.0...
- Installed hashicorp/random v2.3.0 (signed by HashiCorp)
- Installing hashicorp/aws v3.4.0...
- Installed hashicorp/aws v3.4.0 (signed by HashiCorp)

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, we recommend adding version constraints in a required_providers block
in your configuration, with the constraint strings suggested below.

* hashicorp/aws: version = "~> 3.4.0"
* hashicorp/random: version = "~> 2.3.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[root@ip-172-31-9-125 s3bucket]#  terraform validate
Success! The configuration is valid.

[root@ip-172-31-9-125 s3bucket]# terraform plan -out s3bucket
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.tf_code will be created
  + resource "aws_s3_bucket" "tf_code" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "laterraform"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "name" = "tf_bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

  # random_id.tf_bucket_id will be created
  + resource "random_id" "tf_bucket_id" {
      + b64         = (known after apply)
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: s3bucket

To perform exactly these actions, run the following command to apply:
    terraform apply "s3bucket"

[root@ip-172-31-9-125 s3bucket]# terraform apply "s3bucket"

random_id.tf_bucket_id: Creating...
random_id.tf_bucket_id: Creation complete after 0s [id=xH8]
aws_s3_bucket.tf_code: Creating...
aws_s3_bucket.tf_code: Creation complete after 1s [id=laterraform]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

Outputs:

bucket_name = laterraform
